{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["initialBoard","pits","App","React","useState","board","setBoard","className","map","pit","i","onClick","pitIdx","pickedUp","forEach","stoneId","idx","length","push","manc","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAkBMA,EAAe,CACnBC,KAAM,CAAC,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,MAqBnEC,MAlBf,WACE,MAA0BC,IAAMC,SAASJ,GAAzC,mBAAOK,EAAP,KAAcC,EAAd,KAEA,OACE,8BACE,qBAAKC,UAAU,OAAf,SACGF,EAAMJ,KAAKO,KAAI,SAACC,EAAKC,GAAN,OACd,oBAAYC,QAAS,kBAAML,EArBjB,SAACD,EAAOO,GAC1B,IAAMX,EAAOI,EAAMJ,KAAKO,KAAI,SAAAC,GAAG,mBAASA,MAClCI,EAAWZ,EAAKW,GAKtB,OAJAX,EAAKW,GAAU,GACfC,EAASC,SAAQ,SAACC,EAASC,GACzBf,GAAMW,EAASI,EAAM,GAAKf,EAAKgB,QAAQC,KAAKH,MAEvC,CAAEd,QAcmCkB,CAAKd,EAAOK,KAAhD,SACGD,EAAID,KAAI,SAAAO,GAAO,OACd,6BAAmBA,GAAVA,OAFJL,WCjBJU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.52c578f0.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css';\n\n// if this were TS...\n// export type Board = {\n//   pits: number[][]\n// }\n\nexport const manc = (board, pitIdx) => {\n  const pits = board.pits.map(pit => ([...pit]))\n  const pickedUp = pits[pitIdx]\n  pits[pitIdx] = []\n  pickedUp.forEach((stoneId, idx) => {\n    pits[(pitIdx + idx + 1) % pits.length].push(stoneId)\n  })\n  return { pits }\n}\n\nconst initialBoard = {\n  pits: [[1,2,3,4],[5,6,7,8],[9,10,11],[12],[13,14,15,16,17,18],[19,20,21,22],[23,24]]\n}\n\nfunction App() {\n  const [board, setBoard] = React.useState(initialBoard)\n\n  return (\n    <div>\n      <div className=\"pits\">\n        {board.pits.map((pit, i) => (\n          <ul key={i} onClick={() => setBoard(manc(board, i))}>\n            {pit.map(stoneId => (\n              <li key={stoneId}>{stoneId}</li>\n            ))}\n          </ul>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}